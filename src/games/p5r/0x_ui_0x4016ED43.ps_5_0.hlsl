#include "./shared.h"

cbuffer GFD_PSCONST_SYSTEM : register(b0) {
  float4 clearColor : packoffset(c0);
  float2 resolution : packoffset(c1);
  float2 resolutionRev : packoffset(c1.z);
}

SamplerState t_edge_sampler_s : register(s0);
SamplerState t_area_sampler_s : register(s1);
SamplerState t_search_sampler_s : register(s2);
Texture2D<float4> t_edge : register(t0);
Texture2D<float4> t_area : register(t1);
Texture2D<float4> t_search : register(t2);

// 3Dmigoto declarations
#define cmp -

float4 main(float4 v0 : SV_POSITION0, float4 v1 : TEXCOORD0, float4 v2 : TEXCOORD1, float4 v3 : TEXCOORD2, float4 v4 : TEXCOORD3) : SV_TARGET0 {
  if (injectedData.clampState == CLAMP_STATE__MIN_ALPHA) return 1.f;
  if (injectedData.clampState == CLAMP_STATE__MAX_ALPHA) return 0.f;
  float4 r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, o0;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 x0[3];
  r0.xyzw = v1.xyxy;
  r1.xy = v1.zw;
  x0[0].xyzw = v2.xyzw;
  x0[1].xyzw = v3.xyzw;
  x0[2].xyzw = v4.xyzw;
  r2.xyzw = float4(0, 0, 0, 0);
  r3.xyzw = float4(0, 0, 0, 0);
  r1.z = 0;
  r1.zw = t_edge.SampleLevel(t_edge_sampler_s, r0.zw, r1.z).xy;
  r1.w = cmp(0 < r1.w);
  if (r1.w != 0) {
    r4.xyzw = r0.zwzw;
    r1.z = r1.z;
    r2.xy = r2.xy;
    r3.xy = float2(0, 0);
    r1.w = cmp(0 < r1.z);
    r4.xy = r4.xy;
    r5.xy = float2(-1, 1);
    r5.z = 1;
    r6.xy = resolutionRev.xy * r5.xy;
    r6.xy = r6.xy + r4.xy;
    r5.w = 0;
    r6.z = 0;
    r7.xy = r6.xy;
    r6.w = r5.w;
    r7.z = r6.z;
    while (true) {
      r7.w = 8;
      r7.w = cmp(r7.z < r7.w);
      if (r7.w == 0) break;
      r7.w = 0;
      r8.xy = t_edge.SampleLevel(t_edge_sampler_s, r7.xy, r7.w).xy;
      r8.xy = r8.xy;
      r7.w = dot(r8.xy, float2(1, 1));
      r7.w = cmp(r7.w < 1.89999998);
      r6.w = r8.y;
      if (r7.w != 0) break;
      r8.xz = resolutionRev.xy * r5.xy;
      r7.xy = r8.xz + r7.xy;
      r7.z = 1 + r7.z;
      r6.w = r8.y;
    }
    r5.x = cmp(0.899999976 < r6.w);
    r5.x = r5.x ? 1.000000 : 0;
    r5.x = r5.x * r5.z;
    r5.x = r7.z + r5.x;
    r5.x = r1.w ? r5.x : 0;
    r4.xy = r4.xy;
    r6.xy = float2(1, -1);
    r1.w = 0;
    r6.zw = resolutionRev.xy * r6.xy;
    r6.zw = r6.zw + r4.xy;
    r7.x = 0;
    r7.y = 0;
    r7.zw = r6.zw;
    r8.x = r7.x;
    r8.y = r7.y;
    while (true) {
      r8.z = 8;
      r8.z = cmp(r8.y < r8.z);
      if (r8.z == 0) break;
      r8.z = 0;
      r8.zw = t_edge.SampleLevel(t_edge_sampler_s, r7.zw, r8.z).xy;
      r8.zw = r8.zw;
      r8.z = dot(r8.zw, float2(1, 1));
      r8.z = cmp(r8.z < 1.89999998);
      r8.x = r8.w;
      if (r8.z != 0) break;
      r9.xy = resolutionRev.xy * r6.xy;
      r7.zw = r9.xy + r7.zw;
      r8.y = 1 + r8.y;
      r8.x = r8.w;
    }
    r6.x = cmp(0.899999976 < r8.x);
    r6.x = r6.x ? 1.000000 : 0;
    r1.w = r6.x * r1.w;
    r5.y = r8.y + r1.w;
    r5.y = r5.y;
    r1.w = r5.x + r5.y;
    r1.w = cmp(2 < r1.w);
    if (r1.w != 0) {
      r5.z = -r5.x;
      r5.w = -r5.y;
      r6.xyzw = r5.zxyw * resolutionRev.xyxy + r4.zwxy;
      r1.w = 0;
      r5.z = t_edge.SampleLevel(t_edge_sampler_s, r6.xy, r1.w, int2(-1, 0)).y;
      r1.w = 0;
      r6.x = t_edge.SampleLevel(t_edge_sampler_s, r6.xy, r1.w, int2(0, 0)).x;
      r1.w = 0;
      r5.w = t_edge.SampleLevel(t_edge_sampler_s, r6.zw, r1.w, int2(1, 0)).y;
      r1.w = 0;
      r6.y = t_edge.SampleLevel(t_edge_sampler_s, r6.zw, r1.w, int2(1, -1)).x;
      r5.zw = float2(2, 2) * r5.zw;
      r5.zw = r5.zw + r6.xy;
      r1.w = 7;
      r6.xy = cmp(r1.ww >= r5.xy);
      r6.xy = r6.xy ? float2(1, 1) : float2(0, 0);
      r5.zw = r6.xy * r5.zw;
      r5.xy = r5.xy;
      r5.zw = r5.zw;
      r1.w = (int)r2.x;
      r2.x = 20;
      r5.zw = r2.xx * r5.zw;
      r5.xy = r5.zw + r5.xy;
      r5.xy = float2(0.00625000009, 0.0017857143) * r5.xy;
      r5.xy = float2(0.00312500005, 0.000892857148) + r5.xy;
      r6.x = 0.5 + r5.x;
      r1.w = 0.142857149 * r1.w;
      r6.y = r5.y + r1.w;
      r1.w = 0;
      r5.xy = t_area.SampleLevel(t_area_sampler_s, r6.xy, r1.w).xy;
      r5.xy = r5.xy;
      r3.xy = r5.xy + r3.xy;
    }
    r4.xy = r4.xy;
    r5.xy = float2(-1, -1);
    r1.w = 0;
    r5.zw = resolutionRev.xy * r5.xy;
    r5.zw = r5.zw + r4.xy;
    r2.x = 0;
    r6.x = 0;
    r6.yz = r5.zw;
    r6.w = r2.x;
    r7.x = r6.x;
    while (true) {
      r7.y = 8;
      r7.y = cmp(r7.x < r7.y);
      if (r7.y == 0) break;
      r7.y = 0;
      r7.z = t_edge.SampleLevel(t_edge_sampler_s, r6.yz, r7.y).y;
      r7.z = r7.z;
      r7.w = 0;
      r7.y = t_edge.SampleLevel(t_edge_sampler_s, r6.yz, r7.w, int2(1, 0)).x;
      r7.y = r7.y;
      r7.y = dot(r7.yz, float2(1, 1));
      r7.y = cmp(r7.y < 1.89999998);
      r6.w = r7.z;
      if (r7.y != 0) break;
      r7.yw = resolutionRev.xy * r5.xy;
      r6.yz = r7.yw + r6.yz;
      r7.x = 1 + r7.x;
      r6.w = r7.z;
    }
    r2.x = cmp(0.899999976 < r6.w);
    r2.x = r2.x ? 1.000000 : 0;
    r1.w = r2.x * r1.w;
    r5.x = r7.x + r1.w;
    r5.x = r5.x;
    r1.w = 0;
    r1.w = t_edge.SampleLevel(t_edge_sampler_s, r4.xy, r1.w, int2(1, 0)).x;
    r1.w = cmp(0 < r1.w);
    r4.xy = r4.xy;
    r6.xy = float2(1, 1);
    r2.x = 1;
    r6.zw = resolutionRev.xy * r6.xy;
    r6.zw = r6.zw + r4.xy;
    r7.x = 0;
    r7.y = 0;
    r7.zw = r6.zw;
    r8.x = r7.x;
    r8.y = r7.y;
    while (true) {
      r8.z = 8;
      r8.z = cmp(r8.y < r8.z);
      if (r8.z == 0) break;
      r8.z = 0;
      r8.w = t_edge.SampleLevel(t_edge_sampler_s, r7.zw, r8.z).y;
      r8.w = r8.w;
      r9.x = 0;
      r8.z = t_edge.SampleLevel(t_edge_sampler_s, r7.zw, r9.x, int2(1, 0)).x;
      r8.z = r8.z;
      r8.z = dot(r8.zw, float2(1, 1));
      r8.z = cmp(r8.z < 1.89999998);
      r8.x = r8.w;
      if (r8.z != 0) break;
      r9.xy = resolutionRev.xy * r6.xy;
      r7.zw = r9.xy + r7.zw;
      r8.y = 1 + r8.y;
      r8.x = r8.w;
    }
    r6.x = cmp(0.899999976 < r8.x);
    r6.x = r6.x ? 1.000000 : 0;
    r2.x = r6.x * r2.x;
    r2.x = r8.y + r2.x;
    r5.y = r1.w ? r2.x : 0;
    r1.w = r5.x + r5.y;
    r1.w = cmp(2 < r1.w);
    if (r1.w != 0) {
      r5.z = -r5.x;
      r5.w = -r5.x;
      r4.xyzw = r5.zwyy * resolutionRev.xyxy + r4.zwxy;
      r1.w = 0;
      r6.y = t_edge.SampleLevel(t_edge_sampler_s, r4.xy, r1.w, int2(-1, 0)).y;
      r1.w = 0;
      r6.x = t_edge.SampleLevel(t_edge_sampler_s, r4.xy, r1.w, int2(0, -1)).x;
      r1.w = 0;
      r6.zw = t_edge.SampleLevel(t_edge_sampler_s, r4.zw, r1.w, int2(1, 0)).yx;
      r4.xy = float2(2, 2) * r6.yz;
      r4.xy = r4.xy + r6.xw;
      r1.w = 7;
      r4.zw = cmp(r1.ww >= r5.xy);
      r4.zw = r4.zw ? float2(1, 1) : float2(0, 0);
      r4.xy = r4.xy * r4.zw;
      r5.xy = r5.xy;
      r4.xy = r4.xy;
      r1.w = (int)r2.y;
      r2.x = 20;
      r2.xy = r2.xx * r4.xy;
      r2.xy = r2.xy + r5.xy;
      r2.xy = float2(0.00625000009, 0.0017857143) * r2.xy;
      r2.xy = float2(0.00312500005, 0.000892857148) + r2.xy;
      r4.x = 0.5 + r2.x;
      r1.w = 0.142857149 * r1.w;
      r4.y = r2.y + r1.w;
      r1.w = 0;
      r2.xy = t_area.SampleLevel(t_area_sampler_s, r4.xy, r1.w).yx;
      r2.xy = r2.xy;
      r3.xy = r3.xy + r2.xy;
    }
    r3.xy = r3.xy;
    r3.xy = r3.xy;
    r1.w = dot(r3.xy, float2(1, 1));
    r1.w = cmp(r1.w == 0.000000);
    if (r1.w != 0) {
      r2.xy = x0[0].xy;
      r2.xy = r2.xy;
      r1.w = x0[2].x;
      r4.xy = float2(0, 1);
      r5.xz = r2.xy;
      r5.y = r4.y;
      r5.w = r4.x;
      while (true) {
        r4.z = cmp(r1.w < r5.x);
        r4.w = cmp(0.828100026 < r5.y);
        r4.z = r4.w ? r4.z : 0;
        r4.w = cmp(r5.w == 0.000000);
        r4.z = r4.w ? r4.z : 0;
        if (r4.z == 0) break;
        r4.z = 0;
        r5.yw = t_edge.SampleLevel(t_edge_sampler_s, r5.xz, r4.z).yx;
        r5.yw = r5.yw;
        r4.zw = float2(2, 0) * resolutionRev.xy;
        r4.zw = -r4.zw;
        r5.xz = r5.xz + r4.zw;
      }
      r5.w = r5.w;
      r4.z = r5.y;
      r1.w = 0;
      r2.x = 0.5;
      r2.x = r5.w * r2.x;
      r4.x = r2.x + r1.w;
      r1.w = 0;
      r1.w = t_search.SampleLevel(t_search_sampler_s, r4.xz, r1.w).x;
      r1.w = 255 * r1.w;
      r1.w = -r1.w;
      r1.w = 3.25 + r1.w;
      r4.x = resolutionRev.x * r1.w + r5.x;
      r4.x = r4.x;
      r4.x = r4.x;
      r4.y = x0[1].y;
      r4.x = r4.x;
      r1.w = 0;
      r2.x = t_edge.SampleLevel(t_edge_sampler_s, r4.xy, r1.w).x;
      r5.xy = x0[0].zw;
      r5.xy = r5.xy;
      r1.w = x0[2].y;
      r5.zw = float2(0, 1);
      r6.xz = r5.xy;
      r6.y = r5.w;
      r6.w = r5.z;
      while (true) {
        r4.w = cmp(r6.x < r1.w);
        r7.x = cmp(0.828100026 < r6.y);
        r4.w = r4.w ? r7.x : 0;
        r7.x = cmp(r6.w == 0.000000);
        r4.w = r4.w ? r7.x : 0;
        if (r4.w == 0) break;
        r4.w = 0;
        r6.yw = t_edge.SampleLevel(t_edge_sampler_s, r6.xz, r4.w).yx;
        r6.yw = r6.yw;
        r7.xy = float2(2, 0) * resolutionRev.xy;
        r6.xz = r7.xy + r6.xz;
      }
      r6.w = r6.w;
      r5.z = r6.y;
      r1.w = 0.5;
      r4.w = 0.5;
      r4.w = r6.w * r4.w;
      r5.x = r4.w + r1.w;
      r1.w = 0;
      r1.w = t_search.SampleLevel(t_search_sampler_s, r5.xz, r1.w).x;
      r1.w = 255 * r1.w;
      r1.w = -3.25 + r1.w;
      r4.z = resolutionRev.x * r1.w + r6.x;
      r4.z = r4.z;
      r4.z = r4.z;
      r4.z = r4.z;
      r4.xw = resolution.xx * r4.xz;
      r1.xw = -r1.xx;
      r5.xz = r4.xw + r1.xw;
      r1.xw = -r5.xz;
      r1.xw = max(r5.xz, r1.xw);
      r1.xw = sqrt(r1.xw);
      r4.x = 0;
      r2.y = t_edge.SampleLevel(t_edge_sampler_s, r4.zy, r4.x, int2(1, 0)).x;
      r1.xw = r1.xw;
      r2.x = r2.x;
      r2.y = r2.y;
      r2.w = (int)r2.w;
      r4.x = 16;
      r2.xy = float2(4, 4) * r2.xy;
      r2.xy = round(r2.xy);
      r2.xy = r4.xx * r2.xy;
      r1.xw = r2.xy + r1.xw;
      r1.xw = float2(0.00625000009, 0.0017857143) * r1.xw;
      r4.xy = float2(0.00312500005, 0.000892857148) + r1.xw;
      r1.x = 0.142857149 * r2.w;
      r4.z = r4.y + r1.x;
      r1.x = 0;
      r3.xy = t_area.SampleLevel(t_area_sampler_s, r4.xz, r1.x).xy;
      r3.xy = r3.xy;
      r3.xy = r3.xy;
      r4.xyzw = r0.zwzw;
      r5.xz = r5.xz;
      r5.yw = float2(0, 0);
      r4.xyzw = r5.xyzw * resolutionRev.xyxy + r4.xyzw;
      r1.x = 0;
      r2.xy = int2(0, 1);
      r1.x = t_edge.SampleLevel(t_edge_sampler_s, r4.xy, r1.x, int2(0, 1)).x;
      r1.x = r1.x;
      r2.x = -r5.x;
      r2.x = max(r5.x, r2.x);
      r2.y = -r5.z;
      r2.y = max(r5.z, r2.y);
      r2.x = cmp(r2.x < r2.y);
      r2.y = 0;
      r5.xy = int2(0, -2);
      r1.w = t_edge.SampleLevel(t_edge_sampler_s, r4.xy, r2.y, int2(0, -2)).x;
      r1.w = r1.w;
      if (r2.x != 0) {
        r1.xw = -r1.xw;
        r1.xw = float2(1.25, 1.25) + r1.xw;
        r1.xw = max(float2(0, 0), r1.xw);
        r1.xw = min(float2(1, 1), r1.xw);
        r3.xy = r3.xy * r1.xw;
      }
      r1.x = 0;
      r2.yw = int2(1, 1);
      r1.x = t_edge.SampleLevel(t_edge_sampler_s, r4.zw, r1.x, int2(1, 1)).x;
      r2.y = 0;
      r4.xy = int2(1, -2);
      r1.w = t_edge.SampleLevel(t_edge_sampler_s, r4.zw, r2.y, int2(1, -2)).x;
      if (r2.x == 0) {
        r1.xw = -r1.xw;
        r1.xw = float2(1.25, 1.25) + r1.xw;
        r1.xw = max(float2(0, 0), r1.xw);
        r1.xw = min(float2(1, 1), r1.xw);
        r3.xy = r3.xy * r1.xw;
      }
      r3.xy = r3.xy;
    } else {
      r1.z = 0;
    }
  }
  r1.x = cmp(0 < r1.z);
  if (r1.x != 0) {
    r1.xz = x0[1].xy;
    r1.xz = r1.xz;
    r1.w = x0[2].z;
    r2.xy = float2(1, 0);
    r4.xz = r1.zx;
    r4.y = r2.x;
    r4.w = r2.y;
    while (true) {
      r2.w = cmp(r1.w < r4.x);
      r5.x = cmp(0.828100026 < r4.y);
      r2.w = r2.w ? r5.x : 0;
      r5.x = cmp(r4.w == 0.000000);
      r2.w = r2.w ? r5.x : 0;
      if (r2.w == 0) break;
      r2.w = 0;
      r4.yw = t_edge.SampleLevel(t_edge_sampler_s, r4.zx, r2.w).xy;
      r4.yw = r4.yw;
      r5.xy = float2(0, 2) * resolutionRev.xy;
      r5.xy = -r5.xy;
      r4.xz = r5.yx + r4.xz;
    }
    r4.w = r4.w;
    r1.z = r4.y;
    r1.w = 0;
    r2.x = 0.5;
    r2.x = r4.w * r2.x;
    r1.x = r2.x + r1.w;
    r1.w = 0;
    r1.x = t_search.SampleLevel(t_search_sampler_s, r1.xz, r1.w).x;
    r1.x = 255 * r1.x;
    r1.x = -r1.x;
    r1.x = 3.25 + r1.x;
    r2.y = resolutionRev.y * r1.x + r4.x;
    r2.y = r2.y;
    r2.y = r2.y;
    r2.x = x0[0].x;
    r2.y = r2.y;
    r1.x = 0;
    r1.x = t_edge.SampleLevel(t_edge_sampler_s, r2.xy, r1.x).y;
    r4.xy = x0[1].zw;
    r1.w = x0[2].w;
    r4.zw = float2(1, 0);
    r5.xz = r4.yx;
    r5.y = r4.z;
    r5.w = r4.w;
    while (true) {
      r6.x = cmp(r5.x < r1.w);
      r6.y = cmp(0.828100026 < r5.y);
      r6.x = r6.y ? r6.x : 0;
      r6.y = cmp(r5.w == 0.000000);
      r6.x = r6.y ? r6.x : 0;
      if (r6.x == 0) break;
      r6.x = 0;
      r5.yw = t_edge.SampleLevel(t_edge_sampler_s, r5.zx, r6.x).xy;
      r5.yw = r5.yw;
      r6.xy = float2(0, 2) * resolutionRev.xy;
      r5.xz = r6.yx + r5.xz;
    }
    r5.w = r5.w;
    r4.z = r5.y;
    r1.w = 0.5;
    r4.y = 0.5;
    r4.y = r5.w * r4.y;
    r4.x = r4.y + r1.w;
    r1.w = 0;
    r1.w = t_search.SampleLevel(t_search_sampler_s, r4.xz, r1.w).x;
    r1.w = 255 * r1.w;
    r1.w = -3.25 + r1.w;
    r2.w = resolutionRev.y * r1.w + r5.x;
    r2.w = r2.w;
    r2.w = r2.w;
    r2.w = r2.w;
    r4.xy = resolution.yy * r2.yw;
    r1.yw = -r1.yy;
    r4.yw = r4.xy + r1.yw;
    r1.yw = -r4.yw;
    r1.yw = max(r4.yw, r1.yw);
    r1.yw = sqrt(r1.yw);
    r2.y = 0;
    r1.z = t_edge.SampleLevel(t_edge_sampler_s, r2.xw, r2.y, int2(0, 1)).y;
    r1.yw = r1.yw;
    r1.x = r1.x;
    r1.z = r1.z;
    r2.x = (int)r2.z;
    r2.y = 16;
    r1.xz = float2(4, 4) * r1.xz;
    r1.xz = round(r1.xz);
    r1.xz = r2.yy * r1.xz;
    r1.xy = r1.xz + r1.yw;
    r1.xy = float2(0.00625000009, 0.0017857143) * r1.xy;
    r1.xy = float2(0.00312500005, 0.000892857148) + r1.xy;
    r1.w = 0.142857149 * r2.x;
    r1.z = r1.y + r1.w;
    r1.y = 0;
    r3.zw = t_area.SampleLevel(t_area_sampler_s, r1.xz, r1.y).xy;
    r3.zw = r3.zw;
    r3.zw = r3.zw;
    r0.xyzw = r0.xyzw;
    r4.yw = r4.yw;
    r4.xz = float2(0, 0);
    r0.xyzw = r4.xyzw * resolutionRev.xyxy + r0.xyzw;
    r1.x = 0;
    r1.yz = int2(1, 0);
    r1.x = t_edge.SampleLevel(t_edge_sampler_s, r0.xy, r1.x, int2(1, 0)).y;
    r1.x = r1.x;
    r1.z = -r4.y;
    r1.z = max(r4.y, r1.z);
    r1.w = -r4.w;
    r1.w = max(r4.w, r1.w);
    r1.z = cmp(r1.z < r1.w);
    r1.w = 0;
    r2.xy = int2(-2, 0);
    r1.y = t_edge.SampleLevel(t_edge_sampler_s, r0.xy, r1.w, int2(-2, 0)).y;
    r1.y = r1.y;
    if (r1.z != 0) {
      r0.xy = -r1.xy;
      r0.xy = float2(1.25, 1.25) + r0.xy;
      r0.xy = max(float2(0, 0), r0.xy);
      r0.xy = min(float2(1, 1), r0.xy);
      r3.zw = r3.zw * r0.xy;
    }
    r0.x = 0;
    r1.xy = int2(1, 1);
    r0.x = t_edge.SampleLevel(t_edge_sampler_s, r0.zw, r0.x, int2(1, 1)).y;
    r1.x = 0;
    r1.yw = int2(-2, 1);
    r0.y = t_edge.SampleLevel(t_edge_sampler_s, r0.zw, r1.x, int2(-2, 1)).y;
    if (r1.z == 0) {
      r0.xy = -r0.xy;
      r0.xy = float2(1.25, 1.25) + r0.xy;
      r0.xy = max(float2(0, 0), r0.xy);
      r0.xy = min(float2(1, 1), r0.xy);
      r3.zw = r3.zw * r0.xy;
    }
    r3.zw = r3.zw;
  }
  r3.xy = r3.xy;
  r3.zw = r3.zw;
  o0.xyzw = r3.xyzw;
  if (injectedData.clampState == CLAMP_STATE__OUTPUT) {
    o0 = saturate(o0);
  }
  return o0;
}
